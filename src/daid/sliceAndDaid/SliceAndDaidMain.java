package daid.sliceAndDaid;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Vector;

import javax.swing.SwingUtilities;

import daid.sliceAndDaid.config.CraftConfig;
import daid.sliceAndDaid.config.CraftConfigLoader;
import daid.sliceAndDaid.tool.GCodeTool;
import daid.sliceAndDaid.tool.PerimeterTool;
import daid.sliceAndDaid.tool.PathTool;
import daid.sliceAndDaid.tool.SliceTool;
import daid.sliceAndDaid.ui.ConfigWindow;
import daid.sliceAndDaid.ui.PreviewFrame;
import daid.sliceAndDaid.util.GCodeFile;
import daid.sliceAndDaid.util.Logger;
import daid.sliceAndDaid.util.Vector2;

public class SliceAndDaidMain
{
	public static void main(String[] args)
	{
		CraftConfigLoader.loadConfig(null);
		
		if (args.length < 1)
		{
			
			SwingUtilities.invokeLater(new Runnable()
			{
				public void run()
				{
					new ConfigWindow();
				}
			});
		} else
		{
			for (int i = 0; i < args.length; i++)
				sliceModel(args[i]);
		}
	}
	
	public static void sliceModel(String filename)
	{
		long startTime = System.currentTimeMillis();
		CraftConfig.lastSlicedFile = filename;
		CraftConfigLoader.saveConfig(null);
		
		Model m;
		try
		{
			m = new Model(filename);
		} catch (IOException e)
		{
			Logger.error("Failed to load model");
			return;
		}
		m.center();
		SliceTool slicer = new SliceTool(m);
		final Vector<Layer> layers = slicer.sliceModel(CraftConfig.startLayerNr, CraftConfig.endLayerNr, 0.0);
		Logger.updateStatus("Creating outlines");
		for (int i = 0; i < layers.size(); i++)
		{
			LayerPart prevPart = layers.get(i).modelPart;
			for (int c = 0; c < CraftConfig.perimeterCount; c++)
			{
				if (c == 0)
					prevPart = new PerimeterTool(prevPart, CraftConfig.perimeterWidth * 0.5).createPerimeter(c);
				else
					prevPart = new PerimeterTool(prevPart, CraftConfig.perimeterWidth).createPerimeter(c);
				layers.get(i).outlinePart[c] = prevPart;
			}
		}
		Logger.updateStatus("Generating paths");
		Vector2 startPoint = new Vector2(0, 0);
		for (int i = 0; i < layers.size(); i++)
		{
			new PathTool(layers.get(i)).generatePath(startPoint);
			startPoint = layers.get(i).pathStart.start;
		}
		Logger.updateStatus("Generating GCode");
		try
		{
			GCodeFile gcodeFile = new GCodeFile(new FileWriter(filename + "_export.gcode"));
			gcodeFile.writeComment("GCode generated by SliceAndDaid:" + CraftConfig.VERSION);
			
			// TODO: This should be put in startcode.
			gcodeFile.write("G28; Move to origin");
			gcodeFile.write("G92 X-105 Y-105 Z0 E0; Put the 0,0,0 on the center of the platform");
			gcodeFile.writeMoveZ(5, CraftConfig.travelSpeed, "Move the platform down");
			gcodeFile.writeMoveXY(0, 0, CraftConfig.travelSpeed, "Move to the center of the platform");
			gcodeFile.writeMoveZ(0, CraftConfig.travelSpeed, "Move the platform up");
			gcodeFile.write("M106 S255; Turn on the fan");
			gcodeFile.write("M101; extruder on (to get skeinlayer working)");
			
			for (int i = 0; i < layers.size(); i++)
			{
				new GCodeTool(layers.get(i), gcodeFile).generateGCode();
			}
			
			// TODO: This should be put in endcode
			gcodeFile.write("M103; extruder off (to get skeinlayer working)");
			gcodeFile.writeMoveXY(-200, -200, CraftConfig.travelSpeed, "Move away from the printed object, back into the endstops");
			gcodeFile.writeMoveXY(0, -200, CraftConfig.travelSpeed, "");
			gcodeFile.writeMoveXY(-200, -200, CraftConfig.travelSpeed, "");
			gcodeFile.close();
		} catch (IOException e)
		{
			e.printStackTrace();
		}
		
		/* Post slicing */
		long sliceTime = System.currentTimeMillis() - startTime;
		Logger.message("Slice time: " + (((double) sliceTime) / 1000) + " seconds");
		SwingUtilities.invokeLater(new Runnable()
		{
			public void run()
			{
				new PreviewFrame(layers);
			}
		});
	}
}
